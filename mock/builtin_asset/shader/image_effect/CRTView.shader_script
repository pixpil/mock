--[[
https://github.com/henriquelalves/SimpleGodotCRTShader

The MIT License (MIT)

Copyright (c) 2016 Henrique Lacreta Alves

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
]]

--------------------------------------------------------------------
shader 'main' {
	uniform = {
		_sampler_          = sampler( 1 );
		
		ViewSize = block{
			viewWidth  = global( VIEW_WIDTH );
			viewHeight = global( VIEW_HEIGHT );
		};

		Param = block {
			scale            = float( 1 );
			BarrelPower      = float( 1.1 );
			color_bleeding   = float( 1.2 );
			bleeding_range_x = float( 3 );
			bleeding_range_y = float( 3 );
			lines_distance   = float( 4.0 );
			scan_size        = float( 2.0 );
			scanline_alpha   = float( 0.9 );
			lines_velocity   = float( 30.0 );
		};

		Time = block {
			game_time             = script( 'game_time' );
		};
	};

	program_vertex = 'vsh';
	program_fragment = 'fsh';
}


--------------------------------------------------------------------
source 'vsh' [[
	@in vec4 position;
	@in vec2 uv;
	@in vec4 color;

	@out LOWP vec4 colorVarying;
	@out MEDP vec2 uvVarying;
	@out MEDP vec2 pixPos;

	@block Param;
	@block ViewSize;

	void main () {
		gl_Position = position;
		uvVarying = uv;
		pixPos = uv * vec2( viewWidth, viewHeight );
		colorVarying = color;
	}

]]


--------------------------------------------------------------------
source 'fsh' [[
	@out vec4 FragColor;

	@in LOWP vec4 colorVarying;
	@in MEDP vec2 uvVarying;
	@in MEDP vec2 pixPos;

	@sampler _sampler_;

	@block Param;
	@block ViewSize;
	@block Time;

	// // Curvature
	// uniform float BarrelPower =1.1;
	// // Color bleeding
	// uniform float color_bleeding = 1.2;
	// uniform float bleeding_range_x = 3;
	// uniform float bleeding_range_y = 3;
	// // Scanline
	// uniform float lines_distance = 4.0;
	// uniform float scan_size = 2.0;
	// uniform float scanline_alpha = 0.9;
	// uniform float lines_velocity = 30.0;

	vec2 distort(vec2 p) 
	{
		float angle = p.y / p.x;
		float theta = atan(p.y,p.x);
		float radius = pow(length(p), BarrelPower);
		
		p.x = radius * cos(theta);
		p.y = radius * sin(theta);
		
		return 0.5 * (p + vec2(1.0,1.0));
	}

	void get_color_bleeding(inout vec4 current_color,inout vec4 color_left){
		current_color = current_color*vec4(color_bleeding,0.5,1.0-color_bleeding,1);
		color_left = color_left*vec4(1.0-color_bleeding,0.5,color_bleeding,1);
	}

	void get_color_scanline(vec2 uv,inout vec4 c,float time){
		float line_row = floor((uv.y * viewHeight/scan_size) + mod(time*lines_velocity, lines_distance));
		float n = 1.0 - ceil((mod(line_row,lines_distance)/lines_distance));
		c = c - n*c*(1.0 - scanline_alpha);
		c.a = 1.0;
	}

	void main()
	{
		vec2 xy = uvVarying * 2.0;
		xy.x -= 1.0;
		xy.y -= 1.0;
		
		float d = length(xy);
		if(d < 1.5){
			xy = distort(xy);
		}
		else{
			xy = uvVarying;
		}
		
		float pixel_size_x = 1.0/viewWidth*bleeding_range_x;
		float pixel_size_y = 1.0/viewHeight*bleeding_range_y;
		vec4 color_left = texture(_sampler_,xy - vec2(pixel_size_x, pixel_size_y));
		vec4 current_color = texture(_sampler_,xy);
		get_color_bleeding(current_color,color_left);
		vec4 c = current_color+color_left;
		get_color_scanline(xy,c,game_time);
		FragColor = c;

	}
]]

