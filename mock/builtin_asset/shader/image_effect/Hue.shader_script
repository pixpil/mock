--------------------------------------------------------------------
shader 'main' {
	uniform = {
		Param    = block {
			hueOffset = float( 1 );
		};

		_sampler_ = sampler(1);
	};

	program_vertex = 'vsh';
	program_fragment = 'fsh';
}

--------------------------------------------------------------------
source 'vsh' [[
	@in vec4 position;
	@in vec2 uv;
	@in vec4 color;

	@out LOWP vec4 colorVarying;
	@out MEDP vec2 uvVarying;

	void main () {
		gl_Position = position;
		uvVarying = uv;
		colorVarying = color;
	}
]]

--------------------------------------------------------------------
source 'fsh' [[  
	@in LOWP vec4 colorVarying;
	@in MEDP vec2 uvVarying;

	@out vec4 FragColor;
	
	@sampler _sampler_;
	
	@block Param;

	vec3 rgb2hsv(vec3 c)
	{
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

	vec3 hsv2rgb(vec3 c)
	{
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

	void main ()
	{
		// Sample the input pixel
		vec4 color = texture(_sampler_, uvVarying);
		vec3 hue = rgb2hsv( color.rgb );
		hue.r += hueOffset;
		vec3 rgb = hsv2rgb( hue );
		color.r = rgb.r;
		color.g = rgb.g;
		color.b = rgb.b;
		FragColor    = color;
	}
]]
